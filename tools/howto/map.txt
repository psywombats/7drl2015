MGN MAPPING RULES - Sep 1 2012
psy/aking
Follow these rules and learn 2 map!!
================================================================================

Getting started:
All mapping in this engine is done through the Tiled Map Editor, available from
http://www.mapeditor.org . Download it and install it. Next import object types.
Object types can be imported via Edit -> Preferences... -> Object Types ->
Import... . Those are located in the directory game/res/maps/objecttypes.

Map locations:
Maps are located in games/res/maps. There's no need to export them via script or
any other funny stuff. You can feel free to edit any of the maps there.

Tilesets:
Tilesets work a little differently than RM. They don't have to be any particular
size, upper/lower tiles can be mixed, and there are no autotiles (sorry). As
many as you want can be used in a single map. There is a tradeoff, though. In
RM, a tileset was shared by multiple maps. In Tiled, maps own tilesets. You
can't make changes to the Nomad tileset passability in one map and expect it to
change on another map. You can work around this by getting the tileset perfect
on the _TEMPLATE.tmx template map, and then hopefully you won't have to make
changes to a hundred maps whenever anything changes.

Adding a new tileset:
Before doing any mapping, you need a tileset. Put the .png in the tilesets
directory, at game/res/maps/tilesets. Any spacing or margin format is fine. Now
open the template map and hit Map->New Tileset. Select the png you just added
and name it something descriptive. Set transparency color and margin info as
needed. Now to set the passability. The tileset should appear in the list of
sets in the bottom right. Right-click the tiles to set their properties. All of
the impassible tiles should have a property 'x' with no value. There are other
properties for tiles, but those are more specialized. For now, double check that
passability is set correctly (or you'll have to make changes on /all/ maps that
use this tileset) and you're done.

Creating new maps:
Don't. Seriously, there's a bunch of tileset weirdness that comes from making a
new map via Tiled's New option. Instead, copy the template map and work from
there. It's called _TEMPLATE.tmx and is located in the maps directory. Make sure
the template has all the tilesets you'll be using.

Adding maps to the database:
Adding maps will probably undergo heavy revision. For now, to test a map,
there's a database entry under maps/MapMDO key map_movementTest. Change that
dropdown to your map file and you'll load to that map.

Layers:
Layers are split into two types: tile layers and object layers. Tile layers
store tiles and object tiles store objects, or events as they're called in RM
world. Tiles make up the map's appearance and non-interactive elements, and
objects are more interactive things (teleports, NPCs, etc). The order of a layer
in the stack matters. Those on top of the stack (visible on the right) display
on top of the other. This order is preserved in the engine.

Z-depth:
Depth is handled via layer properties. All layers should have a property named
'z'. This indicates the physical (not display) depth of the layer. A z of 0
indicates the floor, 1 represents one tile's height off the ground, 2 is two
tiles' height, etc. What would be called the lower chip in RM has a z-depth of
whole numbers. Decimals are used for upper chip. For instance, a sample map
might have a ground and second floor, each with a lower chip and a few upper
chips used to place overlapping upper-chip objects. In this case, the floor of
the ground floor would be z:0, its upper chip layers would all be z:0.5, the
second floor would be z:1.0, and its upper chip layers all z:1.5. Object layers
follow the same scheme as upper chip layers. This probably is overcomplicated,
so just use the template map and you should be fine.

Overhead passability:
To use this z and layer stuff, different tiles go on different layers. There is
no overhead passability. Instead, put tiles that go overhead on a layer above
(higher z) than the hero, or whatever they're supposed to be above. For example,
a statue from RM might have its base chip on the Upper1 layer, and the head on
the Upper2 layer. A 3-tile pillar would have its top on the Upper3 layer, etc.
Check layers_demonstration.tmx for an example.

Tile properties:
Tiles have properties that can be edited by r-clicking them in the tileset.
This is a list of those properties. You probably don't have to worry about this.
'x' - Blocking chip. If a tile contains this property (no matter what the
value) characters will not be allowed to step on that tile.
'o' - If a tile contains this property, characters will be allowed to use
that tile as a bridge. The "passable" property is only checked for on RM upper
chip style layers with decimal z-depth and will allow the character to step on
that space even if tiles below it are marked
'top' - The tile is the top of a cliff face: its lower half is cliff and its top
half is dirt. Used only in Blockbound because weird physics

Layer properties:
Right now the only layer property is z-depth.

Null tile:
Layers may or may not contain a tile at any given location. In RM, this just
meant that the hero could freely walk over that square. In this engine things
are a bit different. For layers that are RM-style lower chip (that is, floors
with a whole-number z-depth) the lack of a tile at that location means events
can't walk on that location, and may potentially fall from that location. For
layers that are RM-style upper chip (that is, non-floors with decimal z-depth)
the lack of a tile at a location means nothing. Passability is not affected.